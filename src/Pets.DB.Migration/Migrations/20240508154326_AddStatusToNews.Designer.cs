// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pets.DB.Migrations;

#nullable disable

namespace Pets.DB.Migrations.Migrations
{
    [DbContext(typeof(MigrateDbContext))]
    [Migration("20240508154326_AddStatusToNews")]
    partial class AddStatusToNews
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Pets.DB.Migrations.Entities.Need", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("ConcurrencyToken")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConcurrencyTokens")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)");

                    b.Property<string>("ImgLinks")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("MdBody")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("NeedState")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Need", (string)null);
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConcurrencyTokens")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImgLink")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("MdBody")
                        .HasMaxLength(10240)
                        .HasColumnType("varchar(10240)");

                    b.Property<string>("MdShortBody")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("State")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValue("Active");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasDefaultValue("[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id", "OrganisationId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrganisationId");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.NewsPets", b =>
                {
                    b.Property<Guid>("NewsId")
                        .HasColumnType("char(36)")
                        .HasColumnName("NewsId");

                    b.Property<Guid>("PetId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PetId");

                    b.HasKey("NewsId", "PetId");

                    b.HasIndex("PetId");

                    b.HasIndex("NewsId", "PetId")
                        .IsUnique();

                    b.ToTable("NewsPets", (string)null);
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.Organisation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Organisation", (string)null);
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.OrganisationContact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConcurrencyTokens")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)");

                    b.Property<string>("ImgLink")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("MdBody")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationContact", (string)null);
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.Page", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConcurrencyTokens")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImgLink")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("MdBody")
                        .HasMaxLength(10240)
                        .HasColumnType("varchar(10240)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id", "OrganisationId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Page", (string)null);
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("AfterPhotoLink")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<decimal?>("AnimalId")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("BeforePhotoLink")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<Guid>("ConcurrencyTokens")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValue("Unset");

                    b.Property<string>("MdBody")
                        .HasMaxLength(10240)
                        .HasColumnType("varchar(10240)");

                    b.Property<string>("MdShortBody")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PetState")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PetState");

                    b.ToTable("Pet", (string)null);
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("ConcurrencyTokens")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)");

                    b.Property<string>("ImgLink")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("MdBody")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Resource", (string)null);
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(new Guid("10000000-0000-4000-0000-000000000000"));

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("OrganisationId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.Need", b =>
                {
                    b.HasOne("Pets.DB.Migrations.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.News", b =>
                {
                    b.HasOne("Pets.DB.Migrations.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.NewsPets", b =>
                {
                    b.HasOne("Pets.DB.Migrations.Entities.News", "News")
                        .WithMany("NewsPets")
                        .HasForeignKey("NewsId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pets.DB.Migrations.Entities.Pet", "Pet")
                        .WithMany("PetNews")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.OrganisationContact", b =>
                {
                    b.HasOne("Pets.DB.Migrations.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.Page", b =>
                {
                    b.HasOne("Pets.DB.Migrations.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.Pet", b =>
                {
                    b.HasOne("Pets.DB.Migrations.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.Resource", b =>
                {
                    b.HasOne("Pets.DB.Migrations.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.User", b =>
                {
                    b.HasOne("Pets.DB.Migrations.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.News", b =>
                {
                    b.Navigation("NewsPets");
                });

            modelBuilder.Entity("Pets.DB.Migrations.Entities.Pet", b =>
                {
                    b.Navigation("PetNews");
                });
#pragma warning restore 612, 618
        }
    }
}
